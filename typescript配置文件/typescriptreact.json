{
	// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	},
	"create a component": {
		"prefix": "component",
		"body": [
			"import React from 'react';\n",
			"export default class $1 extends React.Component<I$1Props, I$1State> {",
			"\tconstructor(props: I$1Props) {",
			"\t\tsuper(props);",
			"\t}\n",
			"\trender() {",
			"\t\treturn <div>$1</div>;",
			"\t}\n",
			"}\n",
			"interface I$1Props {\n\n}\n",
			"interface I$1State {\n\n}",
		],
		"description": "create a component"
	},
	"create a container": {
		"prefix": "container",
		"body": [
			"import React from 'react';",
			"import { inject, observer } from 'mobx-react';\n",
			"@inject()",
			"@observer",
			"export default class $1 extends React.Component<I$1Props, I$1State> {",
			"\tconstructor(props: I$1Props) {",
			"\t\tsuper(props);",
			"\t}\n",
			"\trender() {",
			"\t\treturn <div>$1</div>;",
			"\t}\n",
			"}\n",
			"interface I$1Props {\n\n}\n",
			"interface I$1State {\n\n}"
		],
		"description": "create a container"
	},
	"create a hoc": {
		"prefix": "hoc",
		"body": [
			"import * as React from 'react';",
			"import { observer } from 'mobx-react';\n",
			"function with$2(WrappedComponent: React.ComponentClass) {\n",
			"\t@observer",
			"\tclass $2Wrapper extends React.Component<I$2WrapperProps, {}> {\n",
			"\t\trender() {",
			"\t\t\treturn <WrappedComponent {...this.props} />;",
			"\t\t}",
			"\t}",
			"\treturn $2Wrapper;",
			"}\n",
			"interface I$2WrapperProps extends IKeyValueMap {\n",
			"}\n",
			"export default with$2;"
		],
		"description": "create a hoc"
	},
	"create a SCU": {
		"prefix": "SCU",
		"body": "\nshouldComponentUpdate(nextProps, nextState){\n\t$1\n}\n",
		"description": "create a SCU"
	},
	"create a componentWillReceiveProps": {
		"prefix": "CWRP",
		"body": "\ncomponentWillReceiveProps(nextProps, nextState){\n\t$1\n}\n",
		"description": "create a componentWillReceiveProps"
	},
	"create a componentDidMount": {
		"prefix": "CDM",
		"body": "\ncomponentDidMount(){\n\t$1\n}\n",
		"description": "create a ncomponentDidMount"
	},
	"create a componentWillUnmount": {
		"prefix": "CWUM",
		"body": "\ncomponentWillUnmount(){\n\t$1\n}\n",
		"description": "create a componentWillUnmount"
	},
}